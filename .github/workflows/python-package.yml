name: Build and test py-lmdb

on:
  push:
    branches: [master, release]
    tags:
      - 'py-lmdb_*'
  pull_request:
    branches: [master]

jobs:
  test:
    name: Test ${{ matrix.os }} (py${{ matrix.python-version }}, ${{ matrix.impl }}, ${{ matrix.purity }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, windows-latest, macos-latest]
        python-version: ['3.8', '3.11', '3.13']
        impl: [cpython, cffi]
        purity: [patched, pure]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set env vars
      shell: bash
      run: |
        if [[ "${{ matrix.impl }}" == "cpython" ]]; then
          echo "LMDB_FORCE_CPYTHON=1" >> $GITHUB_ENV
        else
          echo "LMDB_FORCE_CFFI=1" >> $GITHUB_ENV
        fi
        if [[ "${{ matrix.purity }}" == "pure" ]]; then
          echo "LMDB_PURE=1" >> $GITHUB_ENV
        fi

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest cffi patch-ng setuptools
        python setup.py develop

    - name: Test with pytest
      run: pytest

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BUILD: "cp* pp*"
          CIBW_SKIP: "*-musllinux_*"
          LMDB_FORCE_CPYTHON: 1
          CIBW_TEST_COMMAND: ""

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  publish:
    name: Publish wheels
    permissions:
      id-token: write
    needs: build_wheels
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: cibw-wheels-*
          merge-multiple: true

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1