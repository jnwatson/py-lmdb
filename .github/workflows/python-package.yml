name: Build and test py-lmdb

on:
  push:
    branches: [master, release]
    tags:
      - 'py-lmdb_*'
  pull_request:
    branches: [master]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, windows-latest, macos-latest]
        # Define the build configurations
        include:
          - os: ubuntu-24.04
            env: { LMDB_FORCE_CPYTHON: 1 }
          - os: ubuntu-24.04
            env: { LMDB_FORCE_CFFI: 1 }
          - os: ubuntu-24.04
            env: { LMDB_PURE: 1, LMDB_FORCE_CPYTHON: 1 }
          - os: ubuntu-24.04
            env: { LMDB_PURE: 1, LMDB_FORCE_CFFI: 1 }
          - os: windows-latest
            env: { LMDB_FORCE_CPYTHON: 1 }
          - os: windows-latest
            env: { LMDB_FORCE_CFFI: 1 }
          - os: windows-latest
            env: { LMDB_PURE: 1, LMDB_FORCE_CPYTHON: 1 }
          - os: windows-latest
            env: { LMDB_PURE: 1, LMDB_FORCE_CFFI: 1 }
          - os: macos-latest
            env: { LMDB_FORCE_CPYTHON: 1 }
          - os: macos-latest
            env: { LMDB_FORCE_CFFI: 1 }
          - os: macos-latest
            env: { LMDB_PURE: 1, LMDB_FORCE_CPYTHON: 1 }
          - os: macos-latest
            env: { LMDB_PURE: 1, LMDB_FORCE_CFFI: 1 }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Unshallow fetch for tags

      - name: Cache cibuildwheel and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/cibuildwheel
          key: ${{ runner.os }}-cibw-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-cibw-

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        with:
          # Only build the wheels for the default (patched) cpython version
          build: "cp*"
          skip: "pp*"
        env:
          CIBW_BUILD: "cp*"
          CIBW_SKIP: "pp*"
          CIBW_ENVIRONMENT: >
            ${{ toJSON(matrix.env) }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  publish:
    permissions:
      id-token: write
    needs: [build_wheels]
    runs-on: ubuntu-24.04
    # Only publish on tags
    if: startsWith(github.ref, 'refs/tags')

    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: cibw-wheels-*
          merge-multiple: true

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
